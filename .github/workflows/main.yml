name: Publish to FoundryVTT

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # get part of the tag after the `v`
    - name: Extract tag version number
      id: get_version
      uses: battila7/get-version-action@v2

    # Substitute the Manifest and Download URLs in the module.json
    - name: Substitute Manifest and Download Links For Versioned Ones
      id: sub_manifest_link_version
      uses: microsoft/variable-substitution@v1
      with:
        files: 'module.json'
      env:
        version: ${{steps.get_version.outputs.version-without-v}}
        url: https://github.com/${{github.repository}}
        manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
        download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

    # Run build
    - uses: actions/setup-node@v3
      with:
        node-version: '18'
    - run: npm install
    - run: npm run build

    # Create a zip file with all files required by the module to add to the release
    - run: zip -r ./module.zip module.json readme.md LICENSE assets/ styles/ scripts/ dist/ languages/

    # Create a release for this specific version
    - name: Update Release with Files
      id: create_version_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true # Set this to false if you want to prevent updating existing releases
        name: ${{ github.event.release.name }}
        draft: ${{ github.event.release.unpublished }}
        prerelease: ${{ github.event.release.prerelease }}
        token: ${{ secrets.REPO_SEC }}
        artifacts: './module.json, ./module.zip'
        tag: ${{ github.event.release.tag_name }}
        body: ${{ github.event.release.body }}

    # Publish version to foundry
    - name: Get Module ID
      id: moduleID
      uses: notiz-dev/github-action-json-property@release
      with:
        path: "./module.json"
        prop_path: "id"

    - name: Get mininum
      id: minimum
      uses: notiz-dev/github-action-json-property@release
      with:
        path: "./module.json"
        prop_path: "compatibility.minimum"

    - name: Get verified
      id: verified
      uses: notiz-dev/github-action-json-property@release
      with:
        path: "./module.json"
        prop_path: "compatibility.verified"
  
    # Submit to foundry
    - name: Submit package to FoundryVTT Package Release API
      run: |
        curl -X POST "https://api.foundryvtt.com/_api/packages/release_version/" \
          -H "Content-Type: application/json" \
          -H "Authorization: ${{ secrets.FOUNDRYVTT_RELEASE_TOKEN }}" \
          -d '{
            "id": "${{ steps.moduleID.outputs.prop }}",
            "dry-run": false,
            "release": {
              "version": "${{ steps.get_version.outputs.version-without-v }}",
              "manifest": "https://github.com/${{ github.repository }}/releases/latest/download/module.json",
              "notes": "https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.version-without-v }}",
              "compatibility": {
                "minimum": "${{ steps.minimum.outputs.prop }}",
                "verified": "${{ steps.verified.outputs.prop }}",
                "maximum": ""
              }
            }
          }'
